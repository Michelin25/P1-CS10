Discussion of the region growing algorithm applied in recoloring the Baker tower and the webcam. 
The region finder algorithm works by at first creating a blank in our case black canvas of the same dimensions as the input image, than it goes pixel by pixel from left to right and from top to bottom, checking if the color at the given pixel is within the range set by maxColorDiff than the program starts checking it’s neighbors counting how many of them are within the maxColorDiffif if there is more than 50 pixels whose color are within the maxColorDiff than the arrayList of the points is saved into the regions arrayList. Additionally, to optimize the code the pixels whose values have been checked once for a region are set as visited in the black canvas we discussed in the first sentence.  This canvas than allows us to skip this pixels when looking for the next region.
	Once the image is analyzed, we can either color the 50 largest regions with random colors(See the Baker Tower). Or we can count the number of elements in the regions stored in the regions arraylist to find the largest region, which you can than use for drawing. 
	The algorithm employed  to find the largest region is relatively efficient, there is multiple O of n squared elements such as looping over all the pixels etc, theoretically we could start checking every second or fifth pixel in the image as we look for the biggest region, realistically, if it’s a big region we will still stump into it. This doesn’t however decrease the runtime complexity. The other options would be to use recursion, this would improve readability of the code as it would simplify it, and it could potentially further increases the efficiency of the region finder class. This approach should be further investigated.
